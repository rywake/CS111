Total: 1592 samples
    1574  98.9%  98.9%     1589  99.8% run_thread
       8   0.5%  99.4%        8   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
       2   0.1%  99.5%        2   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1721
       2   0.1%  99.6%        8   0.5% SortedList_insert
       1   0.1%  99.7%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:79
       1   0.1%  99.7%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:160
       1   0.1%  99.8%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       1   0.1%  99.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1714
       1   0.1%  99.9%        1   0.1% __random_r
       1   0.1% 100.0%        2   0.1% rand
       0   0.0% 100.0%     1589  99.8% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111
       0   0.0% 100.0%        7   0.4% SortedList_lookup
       0   0.0% 100.0%        2   0.1% __libc_start_main
       0   0.0% 100.0%        1   0.1% __random
       0   0.0% 100.0%        2   0.1% _start
       0   0.0% 100.0%        2   0.1% create_key
       0   0.0% 100.0%        2   0.1% main
       0   0.0% 100.0%     1589  99.8% start_thread
ROUTINE ====================== run_thread in /u/ma/ugrad/ryan/cs111/lab2b/lab2_list.c
  1574   1589 Total samples (flat / cumulative)
     .      .  121:   //printf("%d,%d\n",num_lists, lock_num);
     .      .  122:   return lock_num;
     .      .  123: 
     .      .  124: }
     .      .  125: 
---
     .      .  126: void * run_thread(void * arg) {
     .      .  127: 
     .      .  128:   SortedListElement_t * current_element = arg;
     .      .  129:   int i;
     .      .  130:   int length;
     .      .  131:   for(i =0; i < num_iterations; i++)
     .      .  132:     {
     .      .  133:       unsigned int lock_num = choose_lock(current_element + i);
     .      .  134:       if (mutex == 1)
     .      .  135: 	{
     .      .  136: 	  pthread_mutex_lock(&locks[lock_num]);
     .      .  137: 	  SortedList_insert(&heads[lock_num], current_element + i);
     .      .  138: 	  pthread_mutex_unlock(&locks[lock_num]);
     .      .  139: 	}
     .      .  140:       else if (spin_lock == 1)
     .      .  141: 	{
   845    845  142: 	  while(__sync_lock_test_and_set(&lock_spin[lock_num], 1));
     .      8  143:           SortedList_insert(&heads[lock_num], current_element + i);
     .      .  144: 	  __sync_lock_release(&lock_spin[lock_num]);
     .      .  145: 	}
     .      .  146:       else
     .      .  147: 	SortedList_insert(&heads[lock_num], current_element + i);
     .      .  148: 	
     .      .  149:     }
     .      .  150:   for (i =0; i < num_lists; i++)
     .      .  151:     {
     .      .  152:       if (mutex == 1)
     .      .  153: 	{
     .      .  154: 	  pthread_mutex_lock(&locks[i]);
     .      .  155: 	  length = SortedList_length(&heads[i]);
     .      .  156: 	  check_length(length);
     .      .  157: 	  pthread_mutex_unlock(&locks[i]);
     .      .  158: 	}
     .      .  159:       else if (spin_lock == 1)
     .      .  160: 	{
     1      1  161: 	  while(__sync_lock_test_and_set(&lock_spin[i], 1));
     .      .  162: 	  length = SortedList_length(&heads[i]);
     .      .  163: 	  check_length(length);
     .      .  164: 	  __sync_lock_release(&lock_spin[i]);
     .      .  165: 	}
     .      .  166:       else
     .      .  167: 	{
     .      .  168: 	  length = SortedList_length(&heads[i]);
     .      .  169: 	  check_length(length);
     .      .  170: 	}
     .      .  171:     }
     .      .  172:   for (i =0; i < num_iterations; i++)
     .      .  173:     {
     .      .  174:       unsigned int lock_num = choose_lock(current_element + i);
     .      .  175:       if (mutex == 1)
     .      .  176: 	{
     .      .  177: 	  pthread_mutex_lock(&locks[lock_num]);
     .      .  178: 	  if (SortedList_delete(SortedList_lookup(&heads[lock_num],(current_element+i)->key)) == 1)
     .      .  179: 	    {
     .      .  180: 	      fprintf(stderr, "Error deleting element: element not found, exiting...\n");
     .      .  181: 	      exit(2);
     .      .  182: 	    }
     .      .  183: 	  pthread_mutex_unlock(&locks[lock_num]);
     .      .  184: 	}
     .      .  185:       else if (spin_lock == 1)
     .      .  186: 	{
   728    728  187: 	  while(__sync_lock_test_and_set(&lock_spin[lock_num], 1));
     .      7  188: 	  if (SortedList_delete(SortedList_lookup(&heads[lock_num],(current_element+i)->key)) == 1)
     .      .  189:             {
     .      .  190:               fprintf(stderr, "Error deleting element: element not found, exiting...\n");
     .      .  191:               exit(2);
     .      .  192:             }
     .      .  193: 	  __sync_lock_release(&lock_spin[lock_num]);
     .      .  194: 	}
     .      .  195:       else
     .      .  196: 	{
     .      .  197: 	  if (SortedList_delete(SortedList_lookup(&heads[lock_num],(current_element+i)->key)) == 1)
     .      .  198:             {
     .      .  199:               fprintf(stderr, "Error deleting element: element not found, exiting...\n");
     .      .  200:               exit(2);
     .      .  201:             }
     .      .  202: 	}
     .      .  203:     } 
     .      .  204: 
     .      .  205:   return NULL;
     .      .  206: }
---
     .      .  207: 
     .      .  208: void print_results(int thread_nums, int it_nums, long long run_time) {
     .      .  209: 
     .      .  210:   int number_ops = thread_nums*it_nums*3;
     .      .  211:   int avg_time_per_op = run_time/number_ops;
ROUTINE ====================== run_thread in /u/ma/ugrad/ryan/cs111/lab2b/lab2_list.c
  1574   1589 Total samples (flat / cumulative)
     .      .  121:   //printf("%d,%d\n",num_lists, lock_num);
     .      .  122:   return lock_num;
     .      .  123: 
     .      .  124: }
     .      .  125: 
---
     .      .  126: void * run_thread(void * arg) {
     .      .  127: 
     .      .  128:   SortedListElement_t * current_element = arg;
     .      .  129:   int i;
     .      .  130:   int length;
     .      .  131:   for(i =0; i < num_iterations; i++)
     .      .  132:     {
     .      .  133:       unsigned int lock_num = choose_lock(current_element + i);
     .      .  134:       if (mutex == 1)
     .      .  135: 	{
     .      .  136: 	  pthread_mutex_lock(&locks[lock_num]);
     .      .  137: 	  SortedList_insert(&heads[lock_num], current_element + i);
     .      .  138: 	  pthread_mutex_unlock(&locks[lock_num]);
     .      .  139: 	}
     .      .  140:       else if (spin_lock == 1)
     .      .  141: 	{
   845    845  142: 	  while(__sync_lock_test_and_set(&lock_spin[lock_num], 1));
     .      8  143:           SortedList_insert(&heads[lock_num], current_element + i);
     .      .  144: 	  __sync_lock_release(&lock_spin[lock_num]);
     .      .  145: 	}
     .      .  146:       else
     .      .  147: 	SortedList_insert(&heads[lock_num], current_element + i);
     .      .  148: 	
     .      .  149:     }
     .      .  150:   for (i =0; i < num_lists; i++)
     .      .  151:     {
     .      .  152:       if (mutex == 1)
     .      .  153: 	{
     .      .  154: 	  pthread_mutex_lock(&locks[i]);
     .      .  155: 	  length = SortedList_length(&heads[i]);
     .      .  156: 	  check_length(length);
     .      .  157: 	  pthread_mutex_unlock(&locks[i]);
     .      .  158: 	}
     .      .  159:       else if (spin_lock == 1)
     .      .  160: 	{
     1      1  161: 	  while(__sync_lock_test_and_set(&lock_spin[i], 1));
     .      .  162: 	  length = SortedList_length(&heads[i]);
     .      .  163: 	  check_length(length);
     .      .  164: 	  __sync_lock_release(&lock_spin[i]);
     .      .  165: 	}
     .      .  166:       else
     .      .  167: 	{
     .      .  168: 	  length = SortedList_length(&heads[i]);
     .      .  169: 	  check_length(length);
     .      .  170: 	}
     .      .  171:     }
     .      .  172:   for (i =0; i < num_iterations; i++)
     .      .  173:     {
     .      .  174:       unsigned int lock_num = choose_lock(current_element + i);
     .      .  175:       if (mutex == 1)
     .      .  176: 	{
     .      .  177: 	  pthread_mutex_lock(&locks[lock_num]);
     .      .  178: 	  if (SortedList_delete(SortedList_lookup(&heads[lock_num],(current_element+i)->key)) == 1)
     .      .  179: 	    {
     .      .  180: 	      fprintf(stderr, "Error deleting element: element not found, exiting...\n");
     .      .  181: 	      exit(2);
     .      .  182: 	    }
     .      .  183: 	  pthread_mutex_unlock(&locks[lock_num]);
     .      .  184: 	}
     .      .  185:       else if (spin_lock == 1)
     .      .  186: 	{
   728    728  187: 	  while(__sync_lock_test_and_set(&lock_spin[lock_num], 1));
     .      7  188: 	  if (SortedList_delete(SortedList_lookup(&heads[lock_num],(current_element+i)->key)) == 1)
     .      .  189:             {
     .      .  190:               fprintf(stderr, "Error deleting element: element not found, exiting...\n");
     .      .  191:               exit(2);
     .      .  192:             }
     .      .  193: 	  __sync_lock_release(&lock_spin[lock_num]);
     .      .  194: 	}
     .      .  195:       else
     .      .  196: 	{
     .      .  197: 	  if (SortedList_delete(SortedList_lookup(&heads[lock_num],(current_element+i)->key)) == 1)
     .      .  198:             {
     .      .  199:               fprintf(stderr, "Error deleting element: element not found, exiting...\n");
     .      .  200:               exit(2);
     .      .  201:             }
     .      .  202: 	}
     .      .  203:     } 
     .      .  204: 
     .      .  205:   return NULL;
     .      .  206: }
---
     .      .  207: 
     .      .  208: void print_results(int thread_nums, int it_nums, long long run_time) {
     .      .  209: 
     .      .  210:   int number_ops = thread_nums*it_nums*3;
     .      .  211:   int avg_time_per_op = run_time/number_ops;
